[{"E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\index.js":"1","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\App.js":"2","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\reportWebVitals.js":"3","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Nutrition.js":"4","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Day.js":"5","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Meal.js":"6","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\EditFoods.js":"7","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Food.js":"8","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Goals.js":"9"},{"size":593,"mtime":1611590349562,"results":"10","hashOfConfig":"11"},{"size":376,"mtime":1611793321335,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":2279,"mtime":1611793461621,"results":"14","hashOfConfig":"11"},{"size":483,"mtime":1611786116795,"results":"15","hashOfConfig":"11"},{"size":346,"mtime":1611784545140,"results":"16","hashOfConfig":"11"},{"size":6280,"mtime":1612194769273,"results":"17","hashOfConfig":"11"},{"size":7073,"mtime":1612293832942,"results":"18","hashOfConfig":"11"},{"size":4078,"mtime":1612207381147,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"uc6tn7",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\index.js",[],["45","46"],"E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\App.js",["47","48"],"import './App.css';\nimport Nutrition from './components/Nutrition.js';\nimport EditFoods from './components/EditFoods.js';\nimport { Router, Route, Switch } from 'react-router';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route exact path=\"/\" component={Nutrition} />\n      <Route path=\"/foods\" component={EditFoods} /> \n    </div>\n  );\n}\n\nexport default App;\n","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\reportWebVitals.js",[],"E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Nutrition.js",[],"E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Day.js",["49"],"import React, {Component} from 'react';\r\nimport Meal from './Meal.js';\r\n\r\nfunction Day(props) {\r\n    //this.props.meals.map((meal, i) => <Meal meal={meal} key={i} />);\r\n    let mappedDay = [];\r\n    for(let m in props.meals)\r\n    {\r\n        mappedDay.push(<Meal time={m} foods={props.meals[m]} key={m}/>);\r\n    }\r\n    return (\r\n      <div className=\"day\">\r\n        <h1>{String(props.day).toUpperCase()}</h1>\r\n          {mappedDay}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Day;","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Meal.js",["50"],"import React, {Component} from 'react';\r\n\r\nfunction Meal(props) {\r\n    let foods = props.foods.map((f, i) => <li key={i}>{f.food}</li>);\r\n    return (\r\n      <section className=\"meal\">\r\n        <h1>{String(props.time).toUpperCase()}</h1>\r\n        <ul>\r\n            {foods}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n  \r\n  export default Meal;",["51","52"],"E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\EditFoods.js",["53","54"],"import React, {Component, Copmponent} from 'react';\r\nimport Food from './Food.js';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass EditFoods extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            foods: [],\r\n            editable: false,\r\n            lastId: 2,\r\n            sort: {column: 'food', direction: 'up'}\r\n        }\r\n\r\n        this.delete = this.delete.bind(this);\r\n        this.edit = this.edit.bind(this);\r\n        this.addRow = this.addRow.bind(this);\r\n        this.changeSort = this.changeSort.bind(this);\r\n        this.toggleEdit = this.toggleEdit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('/api/foods').then( response => {\r\n            this.setState({\r\n                foods: response.data\r\n            });\r\n        });\r\n    }\r\n\r\n    changeSort(val){\r\n        let sortArr = this.state.foods.slice();\r\n        if(val !== this.state.sort.column){\r\n            switch(val) {\r\n                case 'food':\r\n                    sortArr.sort((a, b) => (a.food > b.food) ? 1 : -1);\r\n                    this.setState({sort: {column: 'food', direction: 'down'}, foods: sortArr});\r\n                    break;\r\n                case 'calories':\r\n                    sortArr.sort((a, b) => (a.calories > b.calories) ? 1 : -1);\r\n                    this.setState({sort: {column: 'calories', direction: 'down'}, foods: sortArr});\r\n                    break;\r\n                case 'protein':\r\n                    sortArr.sort((a, b) => (a.protein > b.protein) ? 1 : -1);\r\n                    this.setState({sort: {column: 'protein', direction: 'down'}, foods: sortArr});\r\n                    break;\r\n                case 'carbohydrates':\r\n                    sortArr.sort((a, b) => (a.carbohydrates > b.carbohydrates) ? 1 : -1);\r\n                    this.setState({sort: {column: 'carbohydrates', direction: 'down'}, foods: sortArr});\r\n                    break;\r\n                case 'fats':\r\n                    sortArr.sort((a, b) => (a.fats > b.fats) ? 1 : -1);\r\n                    this.setState({sort: {column: 'fats', direction: 'down'}, foods: sortArr});\r\n                    break;\r\n                case 'serving':\r\n                    sortArr.sort((a, b) => (a.serving > b.serving) ? 1 : -1);\r\n                    this.setState({sort: {column: 'serving', direction: 'down'}, foods: sortArr});\r\n                    break;\r\n                case 'category':\r\n                    sortArr.sort((a, b) => (a.category > b.category) ? 1 : -1);\r\n                    this.setState({sort: {column: 'category', direction: 'down'}, foods: sortArr});\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            let newDirection = this.state.sort.direction === 'down' ? 'up' : 'down';\r\n            if(newDirection === 'down') { \r\n                sortArr.sort((a, b) => (a[val] > b[val]) ? 1 : -1);\r\n            }\r\n            else {\r\n                sortArr.sort((a, b) => a[val] < b[val] ? 1 : -1);\r\n            }\r\n            this.setState({\r\n                foods: sortArr,\r\n                sort: {column: val, direction: newDirection}\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleEdit(){\r\n        this.setState({editable: !this.state.editable});\r\n    }\r\n\r\n    edit(id, food){\r\n        axios.put(`/api/foods/${id}`, {food}).then(response => {\r\n            this.setState({\r\n                foods: response.data\r\n            });\r\n        });\r\n    }\r\n\r\n    delete(id){\r\n        axios.delete(`/api/foods/${id}`).then(response => {\r\n            this.setState({foods: response.data});\r\n        });\r\n    }\r\n\r\n    addRow(e)\r\n    {\r\n        e.preventDefault();\r\n        if(this.state.editable){\r\n            axios.post('/api/foods', {id: -1, food: '', calories: 0, protein: 0, carbohydrates: 0, fats: 0, serving: ''}).then( response => {\r\n                this.setState({foods: response.data});\r\n            });\r\n        } \r\n    }\r\n\r\n    render(){\r\n        let mappedFoods = this.state.foods.map((f, i) => <Food info={f} key={i} edit={this.edit} delete={this.delete} editable={this.state.editable} />)\r\n        return (\r\n            <div className=\"edit\">\r\n                <Link to='/'>Home</Link>\r\n                <div className=\"foodrow-info\">\r\n                    <h2>FOOD <span onClick={e => this.changeSort('food')} \r\n                        className={this.state.sort.column === 'food' ? (this.state.sort.direction === 'up' ? \"headerSortUp black\" : \"headerSortDown black\") : 'headerSortUp'} /></h2>\r\n                    <h2>CALORIES <span onClick={e => this.changeSort('calories')}  className={this.state.sort.column === 'calories' ? (this.state.sort.direction === 'up' ? \"headerSortUp black\" : \"headerSortDown black\") : 'headerSortUp'} /></h2>\r\n                    <h2>PROTEIN <span onClick={e => this.changeSort('protein')}  className={this.state.sort.column === 'protein' ? (this.state.sort.direction === 'up' ? \"headerSortUp black\" : \"headerSortDown black\") : 'headerSortUp'} /></h2>\r\n                    <h2>CARBS <span onClick={e => this.changeSort('carbohydrates')}  className={this.state.sort.column === 'carbohydrates' ? (this.state.sort.direction === 'up' ? \"headerSortUp black\" : \"headerSortDown black\") : 'headerSortUp'} /></h2>\r\n                    <h2>FATS <span onClick={e => this.changeSort('fats')}  className={this.state.sort.column === 'fats' ? (this.state.sort.direction === 'up' ? \"headerSortUp black\" : \"headerSortDown black\") : 'headerSortUp'} /></h2>\r\n                    <h2>SERVING <span onClick={e => this.changeSort('serving')}  className={this.state.sort.column === 'serving' ? (this.state.sort.direction === 'up' ? \"headerSortUp black\" : \"headerSortDown black\") : 'headerSortUp'} /></h2>\r\n                    <h2>CATEGORY <span onClick={e => this.changeSort('category')}  className={this.state.sort.column === 'category' ? (this.state.sort.direction === 'up' ? \"headerSortUp black\" : \"headerSortDown black\") : 'headerSortUp'} /></h2>\r\n                </div>\r\n                {mappedFoods}\r\n                <button id=\"new-food\" onClick={this.addRow}>ADD NEW FOOD</button><button id=\"edit\" onClick={this.toggleEdit}>{this.state.editable ? 'Disable' : 'Edit'}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditFoods;","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Food.js",["55","56"],"import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport {confirmAlert} from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\nclass Food extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: 0, food: '', calories: 0, protein: 0, carbohydrates: 0, fats: 0, serving: '', category: [],\r\n            edited: false,\r\n            focusedValue: ''\r\n        }\r\n\r\n        this.lastState = this.state;\r\n\r\n        this.delete = this.delete.bind(this);\r\n        this.confirmEdit = this.confirmEdit.bind(this);\r\n        this.setFood = this.setFood.bind(this)\r\n        this.addCategory = this.addCategory.bind(this);\r\n        this.removeCategory = this.removeCategory.bind(this);\r\n        this.confirmChanges = this.confirmChanges.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setFood();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.info !== this.props.info) {\r\n            this.setFood();\r\n        }\r\n    }\r\n\r\n    setFood() {\r\n        const { id, food, calories, protein, carbohydrates, fats, serving, category } = this.props.info;\r\n\r\n        this.setState({\r\n            id, food, calories, protein, carbohydrates, fats, serving, category\r\n        }, () => {this.lastState = this.state;});\r\n    }\r\n\r\n    changeFood(val){\r\n        this.setState({food: val, edited: true});\r\n    }\r\n\r\n    changeCalories(val){\r\n        this.setState({calories: val, edited: true});\r\n    }\r\n\r\n    changeCarbs(val){\r\n        this.setState({carbohydrates: val, edited: true});\r\n    }\r\n\r\n    changeFats(val){\r\n        this.setState({fats: val, edited: true});\r\n    }\r\n\r\n    changeProtein(val){\r\n        this.setState({protein: val, edited: true});\r\n    }\r\n\r\n    changeServing(val){\r\n        this.setState({serving: val, edited: true});\r\n    }\r\n\r\n    changeCategory(val){\r\n        console.log(val);\r\n        if(!this.state.category){\r\n            this.setState({\r\n                category: [val]\r\n            });\r\n        }\r\n       else if(!this.state.category.includes(val)){\r\n            this.setState({\r\n                category: [...this.state.category, val], edited: true\r\n            });\r\n        }\r\n        else{\r\n            let copy = this.state.category.slice();\r\n            let index = copy.findIndex(c => c === val);\r\n            copy.splice(index, 1);\r\n            this.setState({\r\n                category: copy, edited: true\r\n            });\r\n        }\r\n    }\r\n\r\n    addCategory(selectedList, selectedItem) { \r\n        this.setState({\r\n            category: [...this.state.category, selectedItem]\r\n        });\r\n    }\r\n\r\n    removeCategory(selectedList, removedItem) {\r\n        let arr = this.state.category.slice();\r\n        arr.splice(arr.findIndex(c => c === removedItem));\r\n        this.setState({\r\n            category: arr\r\n        });\r\n    }\r\n\r\n    delete(e)\r\n    {\r\n        e.preventDefault();\r\n        this.props.delete(this.state.id);\r\n    }\r\n\r\n    confirmEdit(e){\r\n        e.preventDefault();\r\n        this.setState({edited: false});\r\n        this.props.edit(this.state.id, this.state);\r\n    }\r\n\r\n    focusHasChanged(val){\r\n        return this.state.focusedValue === val;\r\n    }\r\n\r\n    confirmChanges(event){\r\n        console.log(event);\r\n        // if(this.focusHasChanged(event.target.value)){\r\n            if(this.state.edited){\r\n                confirmAlert({\r\n                    title: 'Confirm Changes',\r\n                    message: 'Do you want to save your changes?',\r\n                    buttons: [\r\n                        {\r\n                            label: 'Yes',\r\n                            onClick: () => {\r\n                                this.props.edit(this.state.id, this.state)\r\n                                this.setState({edited: false});\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'No',\r\n                            onClick: () => {\r\n                                this.setState({\r\n                                    food: this.lastState.food,\r\n                                    calories: this.lastState.calories,\r\n                                    protein: this.lastState.protein,\r\n                                    carbohydrates: this.lastState.carbohydrates,\r\n                                    fats: this.lastState.fats,\r\n                                    serving: this.lastState.serving,\r\n                                    category: this.lastState.category,\r\n                                    edited: false\r\n                                })\r\n                            }\r\n                        }\r\n                    ]\r\n                });\r\n            }\r\n        // }\r\n    }\r\n\r\n    render(){\r\n        let options = ['Breakfast', 'Lunch', 'Dinner', 'Snack'];\r\n        return (\r\n            <div className=\"food-row\" >\r\n                <form className=\"food-row-edit\" >\r\n                    <input type=\"text\" value={this.state.food} onChange={e => this.changeFood(e.target.value)} readOnly={!this.props.editable} />\r\n                    <input type=\"text\" value={this.state.calories} onChange={e => this.changeCalories(e.target.value)} readOnly={!this.props.editable} />\r\n                    <input type=\"text\" value={this.state.protein} onChange={e => this.changeProtein(e.target.value)} readOnly={!this.props.editable} />\r\n                    <input type=\"text\" value={this.state.carbohydrates} onChange={e => this.changeCarbs(e.target.value)} readOnly={!this.props.editable} />\r\n                    <input type=\"text\" value={this.state.fats} onChange={e => this.changeFats(e.target.value)} readOnly={!this.props.editable} />\r\n                    <input type=\"text\" value={this.state.serving} onChange={e => this.changeServing(e.target.value)} readOnly={!this.props.editable} />\r\n                    <select className=\"category-options\" multiple={true} disabled={!this.props.editable} value={this.state.category} onChange={e => this.changeCategory(e.target.value)}>\r\n                        <option value=\"Breakfast\">Breakfast</option>\r\n                        <option value=\"Lunch\">Lunch</option>\r\n                        <option value=\"Dinner\">Dinner</option>\r\n                        <option value=\"Snack\">Snack</option>\r\n                    </select>\r\n                    {/* <input type=\"text\" value={this.state.category} onChange={e => this.changeCategory(e.target.value)} readOnly={!this.props.editable} /> */}\r\n                    {/* <div><Select width=\"200px\" options={[{value: 'Breakfast', label: 'Breakfast'}, {value: 'Lunch', label: 'Lunch'}, {value: 'Dinner', label: 'Dinner'}, {value: 'Snack', label: 'Snack'}]} onChange={e => this.changeCategory(e)} isMulti isDisabled={!this.props.editable} value={this.state.category}/></div> */}\r\n                </form>\r\n                <button onClick={this.delete}>X</button>\r\n                {this.state.edited && <button onClick={this.confirmEdit}>Update</button>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Food;","E:\\DevMtn\\NoDB\\nutritioncalculator\\src\\components\\Goals.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":4,"column":10,"nodeType":"63","messageId":"64","endLine":4,"endColumn":16},{"ruleId":"61","severity":1,"message":"65","line":4,"column":25,"nodeType":"63","messageId":"64","endLine":4,"endColumn":31},{"ruleId":"61","severity":1,"message":"66","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"61","severity":1,"message":"66","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"57","replacedBy":"67"},{"ruleId":"59","replacedBy":"68"},{"ruleId":"61","severity":1,"message":"69","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":37},{"ruleId":"70","severity":1,"message":"71","line":35,"column":13,"nodeType":"72","messageId":"73","endLine":64,"endColumn":14},{"ruleId":"61","severity":1,"message":"74","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":14},{"ruleId":"61","severity":1,"message":"75","line":157,"column":13,"nodeType":"63","messageId":"64","endLine":157,"endColumn":20},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Component' is defined but never used.",["76"],["77"],"'Copmponent' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Select' is defined but never used.","'options' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]